import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="C√°lculo Num√©rico Q1 2025 - Lista 3", layout="wide")

# Fun√ß√£o para o Exerc√≠cio 6
def exercicio_6():
    # Fun√ß√£o exata
    def f_exato(x):
        return (x - 2)**2 / (x + 3)**3

    # Dados tabelados
    x = np.array([0.00, 0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75])
    f = np.array([0.14815, 0.089213, 0.052478, 0.029630, 0.015625, 0.008215, 0.004010, 0.002100])

    # Par√¢metros
    a, b = 0, 1.75
    n = len(x) - 1
    h = (b - a) / n

    # Fun√ß√£o para calcular as integrais
    def calcular_integrais():
        # Regra dos Trap√©zios
        trapezios = (h / 2) * (f[0] + 2 * np.sum(f[1:n]) + f[n])

        # Regra de Simpson composta + trap√©zio
        n_simpson = 6
        simpson = (h/3) * (f[0] + 4 * (f[1] + f[3] + f[5]) + 2 * (f[2] + f[4]) + f[6])
        trapezio_aux = (h/2) * (f[6] + f[7])
        simpson_soma = simpson + trapezio_aux
        
        return trapezios, simpson_soma

    # Fun√ß√£o para criar o gr√°fico
    def plot_integral(trapezios, simpson_soma):
        x_fine = np.linspace(0, 1.75, 100)
        y_fine = f_exato(x_fine)
        
        fig, ax = plt.subplots(figsize=(6, 3))
        fig.patch.set_facecolor('none')
        ax.set_facecolor('none')
        ax.plot(x_fine, y_fine, 'b-', label=r'$f(x) = \frac{(x-2)^2}{(x+3)^3}$')
        ax.scatter(x, f, color='red', label='Pontos tabelados', zorder=5)
        for i in range(n):
            ax.fill_between([x[i], x[i+1]], [f[i], f[i+1]], alpha=0.2, color="green", 
                           label='Trap√©zios' if i == 0 else "")
        ax.axhline(0, color='black', linestyle='--', alpha=0.3)
        ax.set_xlabel('x')
        ax.set_ylabel('f(x)')
        ax.legend()
        ax.grid(True)
        return fig

    # Interface do Streamlit
    st.title("Integral por Regra dos Trap√©zios e Simpson no intervalo [0, 1.75]")

    # Abas com √≠cones
    tab1, tab2, tab3 = st.tabs(["üìù Introdu√ß√£o", "üîç Metodologia", "üìä Resultado"])

    with tab1:
        st.header("INTRODU√á√ÉO")
        st.markdown("""
        ### Exerc√≠cio 6:
        Calcule a integral de uma fun√ß√£o $f(x) = (x-2)^2/(x+3)^3$ no intervalo $[0, 1.75]$ utilizando os valores tabelados abaixo:
        
        $x: 0.00, 0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75$\n
        $f(x): 1.4815√ó10‚Åª¬π, 8.9213√ó10‚Åª¬≤, 5.2478√ó10‚Åª¬≤, 2.9630√ó10‚Åª¬≤, 1.5625√ó10‚Åª¬≤, 8.2150√ó10‚Åª¬≥, 4.0100√ó10‚Åª¬≥, 2.1000√ó10‚Åª¬≥$
        
        Compare os resultados obtidos pela **Regra dos Trap√©zios** e pela **Regra de Simpson**.
        
        ### Objetivo:
        Resolver numericamente a integral da fun√ß√£o utilizando m√©todos de integra√ß√£o num√©rica (Trap√©zios e Simpson) e comparar os resultados. Apresentar os resultados graficamente e discutir as diferen√ßas entre os m√©todos.
        """)

    with tab2:
        st.header("METODOLOGIA")
        st.markdown("""  
        #### 1. Regra dos Trap√©zios
        **Breve Explica√ß√£o**: A Regra dos Trap√©zios aproxima a integral dividindo a √°rea sob a curva em trap√©zios, somando suas √°reas para estimar o valor total da integral.
        """)
        st.latex(r"""
        \int_a^b f(x) \, dx \approx \frac{h}{2} \left[ f(x_0) + 2 \sum_{i=1}^{n-1} f(x_i) + f(x_n) \right]
        """)
        st.markdown("""
        onde $h = (b-a)/n$ √© o tamanho do intervalo, e $x_i$ s√£o os pontos tabelados.
        
        #### 2. Regra de Simpson
        **Breve Explica√ß√£o**: A Regra de Simpson usa polin√¥mios quadr√°ticos para aproximar a fun√ß√£o em grupos de dois subintervalos, proporcionando maior precis√£o que a Regra dos Trap√©zios.
        """)
        st.latex(r"""
        \int_a^b f(x) \, dx \approx \frac{h}{3} \left[ f(x_0) + 4 \sum_{i=1,3,\dots}^{n-1} f(x_i) + 2 \sum_{i=2,4,\dots}^{n-2} f(x_i) + f(x_n) \right]
        """)
        st.markdown("""
        onde $h = (b-a)/n$ √© o tamanho do intervalo, e $x_i$ s√£o os pontos tabelados. O primeiro somat√≥rio inclui os pontos com √≠ndices √≠mpares ($i=1,3,\dots,n-1$), e o segundo inclui os pontos com √≠ndices pares ($i=2,4,\dots,n-2$). Como o intervalo [0, 1.75] cont√©m 8 pontos (7 subintervalos), aplicamos a Regra de Simpson at√© $x = 1.5$ (6 subintervalos) e usamos a Regra dos Trap√©zios para o √∫ltimo subintervalo [1.5, 1.75].
        
        ### Implementa√ß√£o
        - **Dados**: Utilizamos os pontos tabelados fornecidos.
        - **C√°lculo**: Aplicamos as f√≥rmulas acima para calcular as integrais.
        - **Gr√°fico**: Plotamos a fun√ß√£o exata $f(x) = (x-2)^2/(x+3)^3$, os pontos tabelados e os trap√©zios para visualiza√ß√£o.
        """)

    with tab3:
        st.header("RESULTADO")
        
        if st.button("Executar Exerc√≠cio 6"):
            trapezios, simpson_soma = calcular_integrais()
            st.markdown("""
            - **Regra dos Trap√©zios**: {:.6f}
            - **Regra de Simpson (composta + trap√©zio)**: {:.6f}
            
            ### Gr√°fico
            """.format(trapezios, simpson_soma))
            
            fig = plot_integral(trapezios, simpson_soma)
            st.pyplot(fig)
            
            st.markdown("""
            ### C√≥digo dos M√©todos
            Abaixo, o c√≥digo Python usado para calcular as integrais pelos m√©todos dos Trap√©zios e de Simpson, exibido em colunas para melhor organiza√ß√£o:
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Regra dos Trap√©zios**")
                st.code("""
# Regra dos Trap√©zios
trapezios = (h / 2) * (f[0] + 2 * np.sum(f[1:n]) + f[n])
                """, language="python")
                st.markdown("""
                **Explica√ß√£o Detalhada**:
                - **Par√¢metro $h$ **: Calculado como $h = (b-a)/n = (1.75-0)/7 = 0.25$, onde $n = 7$ √© o n√∫mero de subintervalos.
                - **Soma dos pontos intermedi√°rios**: A fun√ß√£o `np.sum(f[1:n])` soma os valores de $f(x_i)$ para $i=1$ at√© $i=6$ (excluindo os extremos).
                - **Multiplica√ß√£o por 2**: Os pontos intermedi√°rios s√£o multiplicados por 2, conforme a f√≥rmula.
                - **Extremos**: $f(x_0) = f(0)$ e $f(x_n) = f(1.75)$ s√£o somados.
                - Fator $h/2$: O resultado √© multiplicado por $0.25/2 = 0.125$ para obter a integral aproximada.
                """)
            
            with col2:
                st.markdown("**Regra de Simpson**")
                st.code("""
# Regra de Simpson composta + trap√©zio
n_simpson = 6
simpson = (h/3) * (f[0] + 4 * (f[1] + f[3] + f[5]) + 2 * (f[2] + f[4]) + f[6])
trapezio_aux = (h/2) * (f[6] + f[7])
simpson_soma = simpson + trapezio_aux
                """, language="python")
                st.markdown("""
                **Explica√ß√£o Detalhada**:
                - **Simpson at√© $x=1.5$**: Usa 6 subintervalos ($n=6$). O fator $h/3 = 0.25/3 = 0.08333$ multiplica a soma:
                  - $f(x_0) = f(0)$ e $f(x_6) = f(1.5)$ com peso 1.
                  - Pontos √≠mpares $f(x_1), f(x_3), f(x_5)$ com peso 4.
                  - Pontos pares $f(x_2), f(x_4)$ com peso 2.
                - **Trap√©zio auxiliar**: Para o intervalo $[1.5, 1.75]$, calcula $h/2$ com $f(1.5) + f(1.75)$.
                - **Soma final**: Combina o resultado de Simpson com o trap√©zio auxiliar para cobrir todo o intervalo $[0, 1.75]$.
                """)
            
            st.markdown("""
            ### Discuss√£o
            - **Precis√£o**: A Regra de Simpson geralmente √© mais precisa que a Regra dos Trap√©zios, pois usa polin√¥mios de segundo grau, enquanto os trap√©zios usam aproxima√ß√µes lineares. No entanto, como usamos Simpson composta apenas at√© $x = 1.5$ e um trap√©zio para o √∫ltimo intervalo, a diferen√ßa pode ser menos significativa.
            - **Erro**: A fun√ß√£o $f(x) = (x-2)^2/(x+3)^3$ √© suave no intervalo [0, 1.75], o que favorece ambos os m√©todos. A Regra de Simpson tem erro de ordem $O(h^4)$, enquanto a dos Trap√©zios tem erro de ordem $O(h^2)$.
            - **Compara√ß√£o**: Os resultados s√£o pr√≥ximos, mas a Regra de Simpson tende a ser mais pr√≥xima do valor exato devido √† sua maior ordem de precis√£o.
            
            ### Refer√™ncias
            XAI. Grok. Dispon√≠vel em: <https://x.ai/grok>.  
            Henrique123-Marques. Reposit√≥rio do Projeto. Dispon√≠vel em: <https://github.com/Henrique123-Marques/list3_NumericalCalculusUFABC>. \n
            FREITAS. Raphael de Oliveira. CORR√äA. Rejane Izabel Lima. VAZ. Patr√≠cia Machado Sebajos. C√°lculo Num√©rico. Editora SAGAH. 2019.
            """)

# Fun√ß√£o para o Exerc√≠cio 9
def exercicio_9():
    # Fun√ß√£o da EDO
    def f(x, y):
        return -2 * x * y ** 2

    # Solu√ß√£o exata
    def y_exato(x):
        return 1 / (1 + x ** 2)

    # Par√¢metros
    a, b = 0, 1
    h = 0.1
    n = int((b - a) / h)
    x = np.arange(a, b + h, h)

    # Fun√ß√£o para calcular as solu√ß√µes
    def calcular_solucoes():
        y_euler = np.zeros(n + 1)
        y_rk2 = np.zeros(n + 1)
        y_euler[0] = 1.0
        y_rk2[0] = 1.0

        for i in range(n):
            y_euler[i + 1] = y_euler[i] + h * f(x[i], y_euler[i])

        for i in range(n):
            k1 = f(x[i], y_rk2[i])
            k2 = f(x[i] + h, y_rk2[i] + h * k1)
            y_rk2[i + 1] = y_rk2[i] + h * k2
        
        y_ex = y_exato(x)
        return y_euler, y_rk2, y_ex

    # Fun√ß√£o para criar o gr√°fico
    def plot_solucoes(y_euler, y_rk2, y_ex):
        fig, ax = plt.subplots(figsize=(8, 5))
        fig.patch.set_facecolor('none')
        ax.set_facecolor('none')
        ax.plot(x, y_euler, 'g-o', label='Solu√ß√£o num√©rica (Euler)', markersize=5)
        ax.plot(x, y_rk2, 'b-o', label='Solu√ß√£o num√©rica (RK2)', markersize=5)
        ax.plot(x, y_ex, 'r--', label=r'Solu√ß√£o exata: $y = \frac{1}{1 + x^2}$')
        ax.scatter(x, y_euler, color='green', zorder=5)
        ax.scatter(x, y_rk2, color='blue', zorder=5)
        ax.set_xlabel('x')
        ax.set_ylabel('y(x)')
        #ax.set_title("Solu√ß√£o da EDO $y' = -2xy^2$, $y(0) = 1$, por Euler e RK2 ($h = 0.1$)")
        ax.legend()
        ax.grid(True)
        return fig

    # Interface do Streamlit
    st.title("Solu√ß√£o Num√©rica de EDO no Intervalo [0, 1]")

    # Abas com √≠cones
    tab1, tab2, tab3 = st.tabs(["üìù Introdu√ß√£o", "üîç Metodologia", "üìä Resultado"])

    with tab1:
        st.header("INTRODU√á√ÉO")
        st.markdown("""
        ### Exerc√≠cio 9:
        Compare graficamente as solu√ß√µes obtidas pelos m√©todos de Euler e Runge-Kutta de ordem 2 (RK2) com a solu√ß√£o exata $y(x) = 1/(1 + x^2)$ para a equa√ß√£o diferencial ordin√°ria (EDO) $y' = -2xy^2$, com condi√ß√£o inicial $y(0) = 1$, no intervalo $[0, 1]$. Comente as diferen√ßas observadas.

        ### Objetivo:
        Resolver numericamente a EDO utilizando os m√©todos de Euler e RK2 com passo $h = 0.1$, comparar as solu√ß√µes num√©ricas com a solu√ß√£o exata, apresentar os resultados graficamente e discutir as diferen√ßas entre os m√©todos.
        """)

    with tab2:
        st.header("METODOLOGIA")
        st.markdown("""
        #### 1. M√©todo de Euler
        **Breve Explica√ß√£o**: O m√©todo de Euler √© um m√©todo num√©rico de primeira ordem que aproxima a solu√ß√£o da EDO usando a tangente em cada ponto para prever o pr√≥ximo valor.
        """)
        st.latex(r"""
        y_{i+1} = y_i + h \cdot f(x_i, y_i)
        """)
        st.markdown("""
        onde $h$ √© o tamanho do passo, $f(x_i, y_i)$ √© a derivada dada pela EDO ($f(x, y) = -2xy^2$), e $(x_i, y_i)$ s√£o os pontos calculados.

        #### 2. M√©todo de Runge-Kutta de Ordem 2 (RK2)
        **Breve Explica√ß√£o**: O m√©todo RK2 √© um m√©todo de segunda ordem que melhora a precis√£o do Euler ao usar dois c√°lculos de inclina√ß√£o por passo, combinando-os para uma melhor aproxima√ß√£o.
        """)
        st.latex(r"""
        \begin{align*}
        k_1 &= f(x_i, y_i), \\
        k_2 &= f(x_i + h, y_i + h \cdot k_1), \\
        y_{i+1} &= y_i + h \cdot k_2
        \end{align*}
        """)
        st.markdown("""
        onde $k_1$ √© a inclina√ß√£o no in√≠cio do intervalo, e $k_2$ √© a inclina√ß√£o no ponto final estimado, proporcionando uma aproxima√ß√£o mais precisa.

        ### Implementa√ß√£o
        - **Dados**: Intervalo $[0, 1]$, passo $h = 0.1$, condi√ß√£o inicial $y(0) = 1$.
        - **C√°lculo**: Aplicamos os m√©todos de Euler e RK2 para calcular $y(x)$ em 11 pontos ($x = 0, 0.1, \ldots, 1.0$).
        - **Gr√°fico**: Plotamos as solu√ß√µes num√©ricas (Euler e RK2) e a solu√ß√£o exata $y(x) = 1/(1 + x^2)$ para compara√ß√£o visual.
        """)

    with tab3:
        st.header("RESULTADO")
        st.markdown("""
        ###
        Clique no bot√£o abaixo para executar o c√°lculo e visualizar os resultados e o gr√°fico.
        """)
        
        if st.button("Calcular e Mostrar Gr√°fico"):
            y_euler, y_rk2, y_ex = calcular_solucoes()
            
            # Tabela de resultados
            st.markdown("**Tabela de Resultados**")
            st.markdown("""
            | x   | y_Euler | y_RK2 | y_Exata | Erro_Euler | Erro_RK2 |
            |-----|---------|-------|---------|------------|----------|
            """)
            for xi, ye, yr, yex in zip(x, y_euler, y_rk2, y_ex):
                st.markdown(f"| {xi:.1f} | {ye:.6f} | {yr:.6f} | {yex:.6f} | {abs(ye - yex):.6f} | {abs(yr - yex):.6f} |")
            
            # Gr√°fico
            st.markdown("### Gr√°fico")
            fig = plot_solucoes(y_euler, y_rk2, y_ex)
            st.pyplot(fig)
            
            # C√≥digo dos m√©todos
            st.markdown("""
            ### C√≥digo dos M√©todos
            Abaixo, o c√≥digo Python usado para calcular as solu√ß√µes pelos m√©todos de Euler e RK2, exibido em colunas para melhor organiza√ß√£o:
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**M√©todo de Euler**")
                st.code("""
# M√©todo de Euler
y_euler = np.zeros(n + 1)
y_euler[0] = 1.0
for i in range(n):
    y_euler[i + 1] = y_euler[i] + h * f(x[i], y_euler[i])
                """, language="python")
                st.markdown("""
                **Explica√ß√£o Detalhada**:
                - **Inicializa√ß√£o**: Define $y_0 = 1$ para $x_0 = 0$.
                - **Itera√ß√£o**: Para cada $i$ de 0 a $n-1$ ($n=10$):
                  - Calcula $f(x_i, y_i) = -2 x_i y_i^2$.
                  - Atualiza $y_{i+1} = y_i + h \cdot f(x_i, y_i)$, onde $h = 0.1$.
                - **Exemplo para $i=0$**: $x_0 = 0$, $y_0 = 1$, $f(0, 1) = -2 \cdot 0 \cdot 1^2 = 0$, ent√£o $y_1 = 1 + 0.1 \cdot 0 = 1$.
                - Repete para todos os 10 passos, gerando 11 pontos.
                """)
            
            with col2:
                st.markdown("**M√©todo de Runge-Kutta de Ordem 2 (RK2)**")
                st.code("""
# M√©todo de Runge-Kutta de ordem 2 (RK2)
y_rk2 = np.zeros(n + 1)
y_rk2[0] = 1.0
for i in range(n):
    k1 = f(x[i], y_rk2[i])
    k2 = f(x[i] + h, y_rk2[i] + h * k1)
    y_rk2[i + 1] = y_rk2[i] + h * k2
                """, language="python")
                st.markdown("""
                **Explica√ß√£o Detalhada**:
                - **Inicializa√ß√£o**: Define $y_0 = 1$ para $x_0 = 0$.
                - **Itera√ß√£o**: Para cada $i$ de 0 a $n-1$ ($n=10$):
                  - Calcula $k_1 = f(x_i, y_i) = -2 x_i y_i^2$.
                  - Calcula $k_2 = f(x_i + h, y_i + h \cdot k_1)$, avaliando a EDO no ponto estimado $(x_i + 0.1, y_i + 0.1 \cdot k_1)$.
                  - Atualiza $y_{i+1} = y_i + h \cdot k_2$, onde $h = 0.1$.
                - **Exemplo para $i=0$**: $x_0 = 0$, $y_0 = 1$, $k_1 = f(0, 1) = 0$, $k_2 = f(0.1, 1 + 0.1 \cdot 0) = f(0.1, 1) = -2 \cdot 0.1 \cdot 1^2 = -0.2$, ent√£o $y_1 = 1 + 0.1 \cdot (-0.2) = 0.98$.
                - Repete para todos os 10 passos, gerando 11 pontos.
                """)
            
            st.markdown("""
            ### Discuss√£o
            - **Precis√£o**: O m√©todo RK2 √© mais preciso que o Euler, pois usa duas inclina√ß√µes por passo, resultando em erro de ordem $O(h^2)$ contra $O(h)$ do Euler. A tabela mostra que os erros do RK2 s√£o consistentemente menores.
            - **Comportamento**: No gr√°fico, a solu√ß√£o do RK2 segue a solu√ß√£o exata mais de perto, enquanto o Euler diverge ligeiramente, especialmente em $x$ maiores.
            - **Aplica√ß√£o**: Para EDOs com solu√ß√µes suaves, como $y(x) = 1/(1 + x^2)$, o RK2 √© prefer√≠vel devido √† sua maior precis√£o com o mesmo passo $h = 0.1$.

            ### Refer√™ncias
            XAI. Grok. Dispon√≠vel em: <https://x.ai/grok>.  
            Henrique123-Marques. Reposit√≥rio do Projeto. Dispon√≠vel em: <https://github.com/Henrique123-Marques/list3_NumericalCalculusUFABC>.\n
            BURDEN. Richard L. FAIRES. J. Douglas. Numerical Analysis. Ninth Edition.
            """)

# Main app logic
def main():
    st.sidebar.title("C√°lculo Num√©rico Q1 2025 - Lista 3")
    page = st.sidebar.selectbox("Selecione o Exerc√≠cio", ["Exerc√≠cio 6", "Exerc√≠cio 9"])

    if page == "Exerc√≠cio 6":
        exercicio_6()
    elif page == "Exerc√≠cio 9":
        exercicio_9()

if __name__ == "__main__":
    main()